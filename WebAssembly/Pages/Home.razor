@page "/"
@using ApplicationLayer.DataTransferObject
@using DomainLayer.Entities
@using ApplicationLayer.Services
@using NetcodeHub.Packages.Components.Toast
@using NetcodeHub.Packages.Components.Validations.OnInput
@using NetcodeHub.Packages.Components.Modal
@inject IEmployeeService emp
@inject ToastService toastService 

<PageTitle>Home</PageTitle>

<div class="row">
    <div class = "col-lg-6">
        <EditForm Model="employee" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            
            <FloatingText @bind-Value="employee.Name" Label="Name" Placeholder="John Doe" class="form-control mb-3"></FloatingText>
            <ValidationMessage For="()=>employee.Name"/>
            <FloatingTextArea @bind-Value="employee.Address"  Label="Address" Placeholder="eg. 745 Changi Rd" class=" form-control mb-3"></FloatingTextArea>
            <ValidationMessage For="()=>employee.Address"/>
                <button class="btn btn-primary mt-5 mb-5" type="submit">Save</button>
        </EditForm>
    </div>
    <div class="col-lg-6">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Address</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (Employees is not null)
                {
                    foreach (var item in Employees)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td>@item.Address</td>
                            <td>
                                <button class="btn btn-info btn-sm" @onclick="()=>EditClicked(item)">Edit</button>
                                <button class="btn btn-danger btn-sm" @onclick="()=>DeleteClicked(item.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
               
            </tbody>
        </table>
    </div>
</div>

<Confirmation @ref='confirmation' Instruction="@Instruction" Action="Handle" BoostrapClass="border-danger"
CustomStyle="width:300px"/>
<Toast Duration="@duration" Persist=true @ref="toastService.ToastComponent"/>

@code{
    Confirmation? confirmation;
    string Instruction = "Are you sure you want to do this?";
    int duration=4000;
    Employee employee = new ();
    //List<Employee> listEmployee= new();

    async Task Save(){
        var response = new ServiceResponse(false,null!);
        if (employee.Id > 0)
            response = await emp.UpdateAsync(employee); 

        else
            response = await emp.AddAsync(employee);

        if (!response.Flag)
        {
            //listEmployee.Add(employee);
            // this.StateHasChanged();
            duration = 5000;
            toastService.ShowErrorToast("Alert", response.Message);
            return;
        }
        toastService.ShowSuccessToast("Success", response.Message);
        await GetData();
    }

    List<Employee> Employees = new();
    protected override async Task OnInitializedAsync()=> await GetData();

    private async Task GetData() => Employees = await emp.GetAsync();

    void EditClicked(Employee incomEmp)=> employee = incomEmp;

    async void DeleteClicked(int id){
        DeleteId = id; 
        await confirmation!.Show();
    }

    public int DeleteId { get; set; }
    async Task Handle(){
        if (DeleteId == 0) return;

        var (flag, message) = await emp.DeleteAsync(DeleteId);
        await GetData();
        DeleteId = 0;
        StateHasChanged();
    }
}
